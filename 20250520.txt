
# 📘 그룹웨어 프로젝트 구조 및 흐름 정리

## 🧱 1. 프로젝트 구조 요약

```
📁 frontend/
├─ AppRoutes.tsx              # 전체 라우팅 정의
├─ ProtectedRoute.tsx         # 로그인/권한 체크
├─ login.tsx                  # 로그인 페이지
├─ Sidebar.tsx                # 사이드바 (메뉴+검색)
├─ Header.tsx                 # 상단 헤더
├─ PageHeader.tsx             # 페이지 내 제목
├─ Icons.tsx                  # 메뉴 아이콘 모음
├─ UserProvider.tsx           # 사용자 상태 관리
├─ useUser.ts                 # 사용자 정보 접근 커스텀 훅
├─ checkAccess.ts             # 권한 분기 유틸
└─ vite-env.d.ts              # 타입 보강

📁 backend/
├─ authRoutes.js              # /login, /logout, /me 라우트 정의
├─ authController.js          # 로그인/로그아웃 처리 + JWT 발급
├─ authMiddleware.js          # 토큰 검증 미들웨어
├─ userModel.js               # 사용자 DB 조회 함수
├─ systemLogModel.js          # 시스템 로그 기록 함수

📁 common/
├─ types.ts                   # 사용자 역할 타입 정의
└─ Usercontext.ts             # UserContext 정의
```

---

## 🔄 2. 주요 흐름 정리
### 🔐 로그인 처리 흐름
1. `login.tsx`에서 사용자 입력 후 `/api/login`으로 POST 요청
2. `authRoutes.js` → `authController.js`로 연결
3. `authController.js`에서:
   * 사용자 조회 (`userModel.js`)
   * `bcrypt.compare`로 비밀번호 검증
   * 성공 시 JWT 토큰 발급 + 시스템 로그 저장 (`systemLogModel.js`)
4. 클라이언트에서는 `UserProvider.tsx`의 `login()`을 호출해:
   * 상태 저장 (username, role 등)
   * localStorage 저장
5. 이후 페이지 이동 시 Sidebar 및 Header에 사용자 정보 표시됨

---

### ✅ 보호된 페이지 접근 흐름

1. `AppRoutes.tsx`에서 모든 주요 페이지는 `<ProtectedRoute>`로 감싸짐
2. `ProtectedRoute.tsx`에서:

   * 로그인 토큰 없으면 → `/login`으로 이동
   * `requireAdmin=true`인데 일반 유저면 → `/error/403`
3. 조건 통과 시 → 해당 페이지 컴포넌트 렌더링됨

---

## 🧭 전체 흐름도 (텍스트 기반)

```
[사용자 로그인]
   ↓
<login.tsx>
   ↓ (axios.post)
→ /api/login
   ↓
<authRoutes.js> → <authController.js>
   ↓
- 사용자 조회
- 비밀번호 검증
- JWT 발급
- 시스템 로그 기록
   ↓
<frontend UserProvider>
- 로그인 상태 저장
- localStorage 저장
   ↓
<Sidebar / Header>
- 사용자 정보 표시
   ↓
<AppRoutes.tsx> → <ProtectedRoute>
- 토큰 확인 → 허용된 경우 페이지 진입
```

---

## 🧠 주요 개념 설명

| 개념                   | 설명                                    |
| -------------------- | ------------------------------------- |
| **UserContext**      | 전역 사용자 상태 관리. username, role, token 등 |
| **JWT**              | 로그인 성공 시 발급 → 클라이언트에서 인증 유지에 사용       |
| **ProtectedRoute**   | 인증되지 않은 접근 차단. 관리자 전용 분기도 포함          |
| **checkAccess()**    | 역할(`role`) 기반으로 메뉴 및 접근 권한 판단         |
| **system_logs 테이블** | 로그인, 로그아웃, 실패 등의 시스템 이력을 저장           |

---

## 🔧 향후 개선 아이디어

* ✅ 토큰 만료 감지 후 자동 로그아웃
* ✅ `/me` API 활용한 토큰 유효성 확인 → 로그인 상태 자동 복구
* ✅ KPI, 게시판, 캘린더 기능과 API 연결
* ✅ 사이드바 구조를 모듈화 (메뉴 정의 json 별도 관리 등)

