const fs = require("fs");
const path = require("path");
const { insertSystemLog } = require("../models/systemLogModel");

const LOG_DIR = path.join(__dirname, "../logs");
if (!fs.existsSync(LOG_DIR)) fs.mkdirSync(LOG_DIR, { recursive: true });

// Î°úÍ∑∏ ÌååÏùº ÏûêÎèô ÏÑ†ÌÉù
const getLogFile = (level) => {
  switch (level) {
    case "error":
      return "errors.log";
    case "warn":
      return "warn.log";
    case "event":
      return "events.log";
    case "system":
      return "system.log";
    default:
      return "app.log";
  }
};

// Í≥µÌÜµ Î°úÍ∑∏ Í∏∞Î°ù Ìï®Ïàò
const writeLog = (level, message) => {
  const filename = getLogFile(level);
  const logPath = path.join(LOG_DIR, filename);
  const entry = `[${new Date().toISOString()}] ${message}\n`;

  fs.appendFile(logPath, entry, (err) => {
    if (err) console.error(`‚ùó ${filename} Í∏∞Î°ù Ïã§Ìå®:`, err.message);
  });
};

// DB Ïò§Î•ò Î∞úÏÉù Ïãú ÏùëÎãµ + Î°úÍ∑∏
const handleDbError = (res, context, err, status = 500) => {
  const message = `‚ùå [${context}] DB Ïò§Î•ò: ${err.message}`;
  console.error(message);
  writeLog("error", message);
  return res.status(status).json({ error: `${context} Ï§ë Ïò§Î•ò Î∞úÏÉù` });
};

// ÏùºÎ∞ò ÏóêÎü¨
const logError = (context, err) => {
  const message = `‚ùå [${context}] ${err.message}`;
  console.error(message);
  writeLog("error", message);
};

// Í≤ΩÍ≥†
const logWarning = (message) => {
  const full = `‚ö†Ô∏è ${message}`;
  console.warn(full);
  writeLog("warn", full);
};

// Ïù¥Î≤§Ìä∏ Î°úÍ∑∏
const logEvent = (message) => {
  const full = `üìã ${message}`;
  console.log(full);
  writeLog("event", full);
};

// ÏãúÏä§ÌÖú Ïï°ÏÖò Î°úÍ∑∏ (DB + ÌååÏùº)
const logSystemAction = (req, user, action, detail) => {
  const ip = req.headers["x-forwarded-for"] || req.ip;
  const userAgent = req.headers["user-agent"] || "";

  const user_id = user?.id || null;
  const username = user?.username || "UNKNOWN";

  const logMsg = `[${action}] - ÏÇ¨Ïö©Ïûê: ${username} - ${detail}`;
  console.log(logMsg);

  insertSystemLog(user_id, username, action, detail, ip, userAgent);
  writeLog("system", logMsg);
};

module.exports = {
  handleDbError,
  logError,
  logWarning,
  logEvent,
  logSystemAction,
};
